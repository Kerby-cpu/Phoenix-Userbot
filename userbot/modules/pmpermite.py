# Copyright (C) 2019 The Raphielscape Company LLC.
#
# Licensed under the Raphielscape Public License, Version 1.c (the "License");
# you may not use this file except in compliance with the License.
#
"""Userbot module for keeping control who PM you."""

import os
import time
import asyncio
import io
from sqlalchemy.exc import IntegrityError
from telethon.tl.functions.contacts import BlockRequest, UnblockRequest
from telethon.tl.functions.messages import ReportSpamRequest
from telethon.tl.types import User
from telethon import events, errors, functions, types

from userbot import (
    BOTLOG,
    BOTLOG_CHATID,
    CMD_HELP,
    COUNT_PM,
    LASTMSG,
    LOGS,
    PM_AUTO_BAN,
    ALIVE_NAME,
    CUSTOM_PMPERMIT_TEXT,
)
from userbot.events import register


PM_PERMIT_PIC = os.environ.get("PM_PERMIT_PIC", None)
if PM_PERMIT_PIC is None:
  WARN_PIC = "resource/logo/LynxUserbot-Button.jpg"
else:
  WARN_PIC = PM_PERMIT_PIC

COUNT_PM = {}
LASTMSG = {}

# ========================= CONSTANTS ============================

DEFAULTUSER = str(ALIVE_NAME) if ALIVE_NAME else uname().node
CUSTOM_MIDDLE_PMP = str(CUSTOM_PMPERMIT_TEXT) if CUSTOM_PMPERMIT_TEXT else f"‚îÇ·¥ã·¥Ä Ä·¥á…¥·¥Ä s·¥Ä è·¥Ä ·¥Ä·¥ã·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s ·¥ç·¥á·¥ç ô ü·¥è·¥ã…™ Ä\n‚îÇ·¥Ä…¥·¥Ö·¥Ä, ·¥õ·¥ú…¥…¢…¢·¥ú s·¥Ä·¥ç·¥ò·¥Ä…™ {DEFAULTUSER}\n‚îÇ·¥ç·¥á…¥·¥á Ä…™·¥ç·¥Ä ·¥ò·¥ás·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä, ·¥õ·¥á Ä…™·¥ç·¥Ä·¥ã·¥Äs…™ ú.\n" 
DEF_UNAPPROVED_MSG = (
    "‚óÑ‚îà‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚îà‚ïÆ\n"
    "„Ö§  ‚Äú·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥ç·¥áss·¥Ä…¢·¥á.‚Äù\n"
    "‚ï≠‚îà‚îÄ‚ïº‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïæ‚îÄ‚îà‚ïØ\n"
    "‚îÇ‚ùó·¥Ö…™ ü·¥Ä Ä·¥Ä…¥…¢ ·¥ç·¥á ü·¥Ä·¥ã·¥ú·¥ã·¥Ä…¥ s·¥ò·¥Ä·¥ç‚ùó\n‚îÇ\n"
    f"{CUSTOM_MIDDLE_PMP}‚îÇ\n"
    "‚ï∞‚îà‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚îÄ‚û§\n"
    "‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±\n"
    "‚î£[‚óã‚Ä∫ `pesan otomatis`\n"
    f"‚î£[‚óã‚Ä∫ `·¥è ü·¥á ú` ¬© @Badboyanim\n"
    "‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±")

# =================================================================


@register(incoming=True, disable_edited=True, disable_errors=True)
async def permitpm(event):
    """Prohibits people from PMing you without approval. \
        Will block retarded nibbas automatically."""
    if not PM_AUTO_BAN:
        return
    self_user = await event.client.get_me()
    if (
        event.is_private
        and event.chat_id != 777000
        and event.chat_id != self_user.id
        and not (await event.get_sender()).bot
    ):
        try:
            from userbot.modules.sql_helper.globals import gvarstatus
            from userbot.modules.sql_helper.pm_permit_sql import is_approved
        except AttributeError:
            return
        apprv = is_approved(event.chat_id)
        notifsoff = gvarstatus("NOTIF_OFF")

        # Use user custom unapproved message
        getmsg = gvarstatus("unapproved_msg")
        if getmsg is not None:
            UNAPPROVED_MSG = getmsg
            WARN_PIC = getmsg
        else:
            UNAPPROVED_MSG = DEF_UNAPPROVED_MSG
            WARN_PIC = PM_PERMIT_PIC
        # This part basically is a sanity check
        # If the message that sent before is Unapproved Message
        # then stop sending it again to prevent FloodHit
        if not apprv and event.text != UNAPPROVED_MSG:
            if event.chat_id in LASTMSG:
                prevmsg = LASTMSG[event.chat_id]
                # If the message doesn't same as previous one
                # Send the Unapproved Message again
                if event.text != prevmsg:
                    async for message in event.client.iter_messages(
                        event.chat_id, from_user="me", search=UNAPPROVED_MSG, file=WARN_PIC
                    ):
                        await message.delete()
                    await event.reply(f"{WARN_PIC}\n\n{UNAPPROVED_MSG}")
            else:
                await event.reply(f"{WARN_PIC}\n\n{UNAPPROVED_MSG}")
            LASTMSG.update({event.chat_id: event.text})
            if notifsoff:
                await event.client.send_read_acknowledge(event.chat_id)
            if event.chat_id not in COUNT_PM:
                COUNT_PM.update({event.chat_id: 1})
            else:
                COUNT_PM[event.chat_id] = COUNT_PM[event.chat_id] + 1

            if COUNT_PM[event.chat_id] > 4:
                await event.respond(
                    "`·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥Ö…™  ô ü·¥è·¥ã…™ Ä ·¥ã·¥Ä Ä…¥·¥Ä ·¥ç·¥á ü·¥Ä·¥ã·¥ú·¥ã·¥Ä…¥ s·¥ò·¥Ä·¥ç ·¥ò·¥ás·¥Ä…¥`\n"
                    "`·¥ã·¥á  Ä·¥è·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ s·¥Ä è·¥Ä üòº`"
                )

                try:
                    del COUNT_PM[event.chat_id]
                    del LASTMSG[event.chat_id]
                except KeyError:
                    if BOTLOG:
                        await event.client.send_message(
                            BOTLOG_CHATID,
                            "·¥ç·¥è ú·¥è…¥ ·¥ç·¥Ä·¥Ä“ì, ·¥õ·¥á ü·¥Ä ú ·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ç·¥Äs·¥Ä ü·¥Ä ú s·¥Ä·¥Ä·¥õ ·¥ç·¥á…¥…¢ ú…™·¥õ·¥ú…¥…¢ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥ç·¥áss·¥Ä…¢·¥á, ·¥ç·¥è ú·¥è…¥  Ä·¥ás·¥õ·¥Ä Ä·¥õ s·¥Ä è·¥Ä üòø !",
                        )
                    return LOGS.info("CountPM wen't rarted boi")

                await event.client(BlockRequest(event.chat_id))
                await event.client(ReportSpamRequest(peer=event.chat_id))

                if BOTLOG:
                    name = await event.client.get_entity(event.chat_id)
                    name0 = str(name.first_name)
                    await event.client.send_message(
                        BOTLOG_CHATID,
                        "["
                        + name0
                        + "](tg://user?id="
                        + str(event.chat_id)
                        + ")"
                        + " ·¥õ·¥á ü·¥Ä ú ·¥Ö…™ ô ü·¥è·¥ã…™ Ä ·¥ã·¥Ä Ä…¥·¥Ä ·¥ç·¥á ü·¥Ä·¥ã·¥ú·¥ã·¥Ä…¥ s·¥ò·¥Ä·¥ç ·¥ã·¥á  Ä·¥è·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ",
                    )


@register(disable_edited=True, outgoing=True, disable_errors=True)
async def auto_accept(event):
    """·¥°…™ ü ü ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è …™“ì  è·¥è·¥ú ·¥õ·¥áx·¥õ·¥á·¥Ö ·¥õ ú·¥á·¥ç “ì…™ Äs·¥õ."""
    if not PM_AUTO_BAN:
        return
    self_user = await event.client.get_me()
    if (
        event.is_private
        and event.chat_id != 777000
        and event.chat_id != self_user.id
        and not (await event.get_sender()).bot
    ):
        try:
            from userbot.modules.sql_helper.globals import gvarstatus
            from userbot.modules.sql_helper.pm_permit_sql import approve, is_approved
        except AttributeError:
            return

        # Use user custom unapproved message
        get_message = gvarstatus("unapproved_msg")
        if get_message is not None:
            UNAPPROVED_MSG = get_message
        else:
            UNAPPROVED_MSG = DEF_UNAPPROVED_MSG
        chat = await event.get_chat()
        if isinstance(chat, User):
            if is_approved(event.chat_id) or chat.bot:
                return
            async for message in event.client.iter_messages(
                event.chat_id, reverse=True, limit=1
            ):
                if (
                    message.text is not UNAPPROVED_MSG
                    and message.from_id == self_user.id
                ):
                    try:
                        approve(event.chat_id)
                    except IntegrityError:
                        return

                if is_approved(event.chat_id) and BOTLOG:
                    await event.client.send_message(
                        BOTLOG_CHATID,
                        "#·¥Ä·¥ú·¥õ·¥è-·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö\n"
                        + "User : "
                        + f"[{chat.first_name}](tg://user?id={chat.id})",
                    )


@register(outgoing=True, pattern=r"^\.notifoff$")
async def notifoff(noff_event):
    """For .notifoff command, stop getting notifications from unapproved PMs."""
    try:
        from userbot.modules.sql_helper.globals import addgvar
    except AttributeError:
        return await noff_event.edit("` Ä·¥ú…¥…¥…™…¥…¢ ·¥è…¥ …¥·¥è…¥-s«´ ü ·¥ç·¥è·¥Ö·¥á!`")
    addgvar("NOTIF_OFF", True)
    await noff_event.edit("#…¥·¥è·¥õ…™“ì ·¥è“ì“ì ‚ùå\n`…¥·¥è·¥õ…™“ì…™·¥ã·¥Äs…™ ·¥Ö·¥Ä Ä…™ ·¥ò·¥ás·¥Ä…¥ ·¥ò Ä…™ ô·¥Ä·¥Ö…™ ·¥õ·¥á ü·¥Ä ú ·¥Ö…™…¥·¥è…¥·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥.`")


@register(outgoing=True, pattern=r"^\.notifon$")
async def notifon(non_event):
    """For .notifoff command, get notifications from unapproved PMs."""
    try:
        from userbot.modules.sql_helper.globals import delgvar
    except AttributeError:
        return await non_event.edit("` Ä·¥ú…¥…¥…™…¥…¢ ·¥è…¥ …¥·¥è…¥-s«´ ü ·¥ç·¥è·¥Ö·¥á!`")
    delgvar("NOTIF_OFF")
    await non_event.edit("#NOTIF ON ‚òëÔ∏è\n`…¥·¥è·¥õ…™“ì…™·¥ã·¥Äs…™ ·¥Ö·¥Ä Ä…™ ·¥ò·¥ás·¥Ä…¥ ·¥ò Ä…™ ô·¥Ä·¥Ö…™ ·¥õ·¥á ü·¥Ä ú ·¥Ö…™·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥.`")


@register(outgoing=True, pattern=r"^\.(?:setuju|ok)\s?(.)?")
async def approvepm(apprvpm):
    """For .ok command, give someone the permissions to PM you."""
    try:
        from userbot.modules.sql_helper.globals import gvarstatus
        from userbot.modules.sql_helper.pm_permit_sql import approve
    except AttributeError:
        return await apprvpm.edit("` Ä·¥ú…¥…¥…™…¥…¢ ·¥è…¥ …¥·¥è…¥-s«´ ü ·¥ç·¥è·¥Ö·¥á!`")

    if apprvpm.reply_to_msg_id:
        reply = await apprvpm.get_reply_message()
        replied_user = await apprvpm.client.get_entity(reply.from_id)
        aname = replied_user.id
        name0 = str(replied_user.first_name)
        uid = replied_user.id

    else:
        aname = await apprvpm.client.get_entity(apprvpm.chat_id)
        name0 = str(aname.first_name)
        uid = apprvpm.chat_id

    # Get user custom msg
    getmsg = gvarstatus("unapproved_msg")
    if getmsg is not None:
        UNAPPROVED_MSG = getmsg
    else:
        UNAPPROVED_MSG = DEF_UNAPPROVED_MSG

    async for message in apprvpm.client.iter_messages(
        apprvpm.chat_id, from_user="me", search=UNAPPROVED_MSG
    ):
        await message.delete()

    try:
        approve(uid)
    except IntegrityError:
        return await apprvpm.edit("‚ö°")

    await apprvpm.edit(f"[{name0}](tg://user?id={uid}) `·¥ò·¥ás·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥Ö…™·¥õ·¥á Ä…™·¥ç·¥Ä` ‚òëÔ∏è")
    await apprvpm.delete(getmsg)
    await message.delete()

    if BOTLOG:
        await apprvpm.client.send_message(
            BOTLOG_CHATID,
            "#·¥Ö…™·¥õ·¥á Ä…™·¥ç·¥Ä\n" + "User: " + f"[{name0}](tg://user?id={uid})"
        )


@register(outgoing=True, pattern=r"^\.(?:·¥õ·¥è ü·¥Ä·¥ã|…¥·¥è·¥ò·¥ç)\s?(.)?")
async def disapprovepm(disapprvpm):
    try:
        from userbot.modules.sql_helper.pm_permit_sql import dissprove
    except BaseException:
        return await disapprvpm.edit("` Ä·¥ú…¥…¥…™…¥…¢ ·¥è…¥ …¥·¥è…¥-s«´ ü ·¥ç·¥è·¥Ö·¥á!`")

    if disapprvpm.reply_to_msg_id:
        reply = await disapprvpm.get_reply_message()
        replied_user = await disapprvpm.client.get_entity(reply.from_id)
        aname = replied_user.id
        name0 = str(replied_user.first_name)
        dissprove(aname)
    else:
        dissprove(disapprvpm.chat_id)
        aname = await disapprvpm.client.get_entity(disapprvpm.chat_id)
        name0 = str(aname.first_name)

    await disapprvpm.edit(
        f"`·¥ç·¥Ä·¥Ä“ì` [{name0}](tg://user?id={disapprvpm.chat_id}) `·¥ò·¥ás·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥Ö…™·¥õ·¥è ü·¥Ä·¥ã, ·¥ç·¥è ú·¥è…¥ ·¥ä·¥Ä…¥…¢·¥Ä…¥ ·¥ç·¥á ü·¥Ä·¥ã·¥ú·¥ã·¥Ä…¥ s·¥ò·¥Ä·¥ç ·¥ã·¥á  Ä·¥è·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ!`"
    )

    if BOTLOG:
        await disapprvpm.client.send_message(
            BOTLOG_CHATID,
            f"[{name0}](tg://user?id={disapprvpm.chat_id})"
            " ` ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™·¥õ·¥è ü·¥Ä·¥ã` !",
        )


@register(outgoing=True, pattern=r"^\.block$")
async def blockpm(block):
    """For .block command, block people from PMing you!"""
    if block.reply_to_msg_id:
        reply = await block.get_reply_message()
        replied_user = await block.client.get_entity(reply.from_id)
        aname = replied_user.id
        name0 = str(replied_user.first_name)
        await block.client(BlockRequest(aname))
        await block.edit("`·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥Ö…™ ô ü·¥è·¥ã…™ Ä ·¥è ü·¥á ú s·¥Ä è·¥Ä !`")
        uid = replied_user.id
    else:
        await block.client(BlockRequest(block.chat_id))
        aname = await block.client.get_entity(block.chat_id)
        await block.edit("`·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥Ö…™ ô ü·¥è·¥ã…™ Ä ·¥è ü·¥á ú s·¥Ä è·¥Ä !`")
        name0 = str(aname.first_name)
        uid = block.chat_id

    try:
        from userbot.modules.sql_helper.pm_permit_sql import dissprove

        dissprove(uid)
    except AttributeError:
        pass

    if BOTLOG:
        await block.client.send_message(
            BOTLOG_CHATID,
            "# ô ü·¥è·¥ã…™ Ä\n" + "User : " + f"[{name0}](tg://user?id={uid})",
        )


@register(outgoing=True, pattern=r"^\.unblock$")
async def unblockpm(unblock):
    """For .unblock command, let people PMing you again!"""
    if unblock.reply_to_msg_id:
        reply = await unblock.get_reply_message()
        replied_user = await unblock.client.get_entity(reply.from_id)
        name0 = str(replied_user.first_name)
        await unblock.client(UnblockRequest(replied_user.id))
        await unblock.edit("`·¥Ä…¥·¥Ö·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™ ô ü·¥è·¥ã…™ Ä  ü·¥Ä…¢…™.`")

    if BOTLOG:
        await unblock.client.send_message(
            BOTLOG_CHATID,
            f"[{name0}](tg://user?id={replied_user.id})" "·¥Ä…¥·¥Ö·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ü·¥Ä…¢…™ ·¥Ö…™ ô ü·¥è·¥ã…™ Ä.",
        )


@register(outgoing=True, pattern=r"^.(s·¥á·¥õ|…¢·¥á·¥õ| Ä·¥ás·¥á·¥õ) pm_msg(?: |$)(\w*)")
async def add_pmsg(cust_msg):
    """Set your own Unapproved message"""
    if not PM_AUTO_BAN:
        return await cust_msg.edit("**·¥ç·¥è ú·¥è…¥ ·¥ç·¥Ä·¥Ä“ì, ·¥Ä…¥·¥Ö·¥Ä  ú·¥Ä Ä·¥ús ·¥ç·¥á…¥ è·¥á·¥õ·¥á ü** `PM_AUTO_BAN` **·¥ã·¥á** `True`\n s…™ ü·¥Ä ú·¥ã·¥Ä…¥  ü·¥Ä·¥ã·¥ú·¥ã·¥Ä…¥ s·¥á·¥õ ·¥†·¥Ä Ä.\nUsage : `.set var PM_AUTO_BAN True`")
    try:
        import userbot.modules.sql_helper.globals as sql
    except AttributeError:
        await cust_msg.edit("` Ä·¥ú…¥…¥…™…¥…¢ ·¥è…¥ …¥·¥è…¥-s«´ ü ·¥ç·¥è·¥Ö·¥á!`")
        return

    await cust_msg.edit("`s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás...`")
    conf = cust_msg.pattern_match.group(1)

    custom_message = sql.gvarstatus("unapproved_msg")

    if conf.lower() == "set":
        message = await cust_msg.get_reply_message()
        status = "Pesan"

        # check and clear user unapproved message first
        if custom_message is not None:
            sql.delgvar("unapproved_msg")
            status = "Pesan"

        if message:
            msg = message.message  # get the plain text
            sql.addgvar("unapproved_msg", msg)
        else:
            return await cust_msg.edit("`·¥ç·¥è ú·¥è…¥  ô·¥Ä ü·¥Äs ·¥ã·¥á ·¥ò·¥ás·¥Ä…¥`")

        await cust_msg.edit("#s·¥á·¥õ·¥õ…™…¥…¢s ‚òëÔ∏è\n`·¥ò·¥ás·¥Ä…¥  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™s…™·¥ç·¥ò·¥Ä…¥ ·¥ã·¥á  Ä·¥è·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ.`")

        if BOTLOG:
            await cust_msg.client.send_message(
                BOTLOG_CHATID, f"**{status} ·¥ò·¥ç  è·¥Ä…¥…¢ ·¥õ·¥á Äs…™·¥ç·¥ò·¥Ä…¥ ·¥Ö·¥Ä ü·¥Ä·¥ç  Ä·¥è·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö·¥Ä :** \n\n{msg}"
            )

    if conf.lower() == "reset":
        if custom_message is not None:
            sql.delgvar("unapproved_msg")
            await cust_msg.edit("#·¥Ö·¥á ü·¥á·¥õ·¥á ‚òëÔ∏è\n`·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥ò·¥ás·¥Ä…¥ ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥ò·¥ç ·¥ã·¥á ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ.`")
        else:

            await cust_msg.edit("`·¥ò·¥ás·¥Ä…¥ ·¥ò·¥ç ·¥Ä…¥·¥Ö·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ s·¥á·¥ä·¥Ä·¥ã ·¥Ä·¥°·¥Ä ü.`")

    if conf.lower() == "get":
        if custom_message is not None:
            await cust_msg.edit(
                f"**…™…¥…™ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú ·¥ò·¥ás·¥Ä…¥ ·¥ò·¥ç  è·¥Ä…¥…¢ s·¥á·¥ã·¥Ä Ä·¥Ä…¥…¢ ·¥Ö…™·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ ·¥ã·¥á  Ä·¥è·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö·¥Ä :**\n\n{custom_message}"
            )
        else:
            await cust_msg.edit(
                "*·¥Ä…¥·¥Ö·¥Ä  ô·¥á ü·¥ú·¥ç ·¥ç·¥á…¥ è·¥á·¥õ·¥á ü ·¥ò·¥ás·¥Ä…¥ ·¥ò·¥ç*\n"
                f"·¥ç·¥Äs…™ ú ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ ·¥ò·¥ç ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ : \n\n`{DEF_UNAPPROVED_MSG}`"
            )



CMD_HELP.update(
    {
        "pmpermit": "‚úò P ü·¥ú…¢…™…¥ : Private Message Permite"
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.setuju | .ok`"
        "\n‚Ü≥ : Menerima Pesan Seseorang Dengan Cara Balas Pesannya Atau Tag dan Juga Untuk Dilakukan Di PM."
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.tolak | .nopm`"
        "\n‚Ü≥ : Menolak Pesan Seseorang Dengan Cara Balas Pesannya Atau Tag dan Juga Untuk Dilakukan Di PM."
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.block`"
        "\n‚Ü≥ : Memblokir Orang Di PM."
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.unblock`"
        "\n‚Ü≥ : Membuka Blokir."
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.notifoff`"
        "\n‚Ü≥ : Menonaktifkan Notifikasi Pesan Yang Belum Diterima."
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.notifon`"
        "\n‚Ü≥ : Mengaktifkan Notifikasi Pesan Yang Belum Diterima."
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.set pm_msg` <Reply Message>"
        "\n‚Ü≥ : Menyetel Pesan Pribadimu Untuk Orang Yang Pesannya Belum Diterima."
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.get pm_msg`"
        "\n‚Ü≥ : Mendapatkan Custom Pesan PM-Mu."
        "\n\n‚ö°ùòæùôàùòø‚ö°: `.reset pm_msg`"
        "\n‚Ü≥ : Menghapus Pesan PM ke Default."
        "\n\nPesan Pribadi Yang Belum Diterima Saat Ini Tidak Dapat Disetel"
        "\nke Teks Format. Seperti : Bold, Underline, Link, dll."
        "\nPesan Akan Terkirim Normal Saja."})
